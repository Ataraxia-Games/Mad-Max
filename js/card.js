class Card {
    static EMOJIS = [
        'üèúÔ∏è',  // –ü—É—Å—Ç—ã–Ω—è
        'üöó',  // –ú–∞—à–∏–Ω–∞
        '‚õΩ',  // –ë–µ–Ω–∑–∏–Ω
        'üåµ',  // –ö–∞–∫—Ç—É—Å (–∑–∞–º–µ–Ω–∏–ª —á–µ—Ä–µ–ø)
        'üî•',  // –û–≥–æ–Ω—å
        '‚ö°',  // –ú–æ–ª–Ω–∏—è
        'üå™Ô∏è',  // –ë—É—Ä—è
        'üõ°Ô∏è',  // –©–∏—Ç
        '‚öîÔ∏è',  // –û—Ä—É–∂–∏–µ
        'üí™'   // –°–∏–ª–∞
    ];

    static CORNERS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];

    constructor(id, name, type, rarity, description = '', victoryPoints = 0) {
        this.id = id;
        this.name = name;
        this.type = type.toUpperCase(); // MOVE, ATTACK, REST, HEAL
        this.rarity = rarity.toUpperCase(); // COMMON, RARE
        this.description = description || this.getDefaultDescription();
        this.victoryPoints = victoryPoints; // 0-3 —á–µ—Ä–µ–ø–∞
        this.element = null;
        this.emoji = null;
        this.emojiPosition = null;
    }

    getDefaultDescription() {
        switch (this.type) {
            case 'MOVE':
                return '–ü–µ—Ä–µ–¥–≤–∏–Ω—å—Ç–µ—Å—å –Ω–∞ —Å–æ—Å–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é';
            case 'ATTACK':
                return '–ê—Ç–∞–∫—É–π—Ç–µ —Å–æ—Å–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É –∏–ª–∏ –∏–≥—Ä–æ–∫–∞';
            case 'REST':
                return '–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—ã';
            case 'HEAL':
                return '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 2 –µ–¥–∏–Ω–∏—Ü—ã –∑–¥–æ—Ä–æ–≤—å—è';
            default:
                return '';
        }
    }

    static createStarterDeck() {
        const deck = [
            // 3 –∫–∞—Ä—Ç—ã Move
            new Card(1, "Move!", "MOVE", "COMMON"),
            new Card(2, "Move!", "MOVE", "COMMON"),
            new Card(3, "Move!", "MOVE", "COMMON"),
            // 3 –∫–∞—Ä—Ç—ã Attack
            new Card(4, "Attack!", "ATTACK", "COMMON"),
            new Card(5, "Attack!", "ATTACK", "COMMON"),
            new Card(6, "Attack!", "ATTACK", "COMMON"),
            // 3 –∫–∞—Ä—Ç—ã Rest
            new Card(7, "Rest", "REST", "COMMON"),
            new Card(8, "Rest", "REST", "COMMON"),
            new Card(9, "Rest", "REST", "COMMON"),
            // 1 –∫–∞—Ä—Ç–∞ Heal
            new Card(10, "Heal", "HEAL", "COMMON")
        ];
        return deck;
    }

    static createFieldDeck() {
        const cards = [];
        let id = 1;

        // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        const characters = [
            { name: "–ú–∞–∫—Å –†–æ–∫–∞—Ç–∞–Ω—Å–∫–∏", description: "–û–¥–∏–Ω–æ–∫–∏–π –≤–æ–∏–Ω –¥–æ—Ä–æ–≥", rarity: "RARE" },
            { name: "–§—É—Ä–∏–æ—Å–∞", description: "–ë–µ—Å—Å—Ç—Ä–∞—à–Ω–∞—è –≤–æ–∏—Ç–µ–ª—å–Ω–∏—Ü–∞", rarity: "RARE" },
            { name: "–ù–µ—Å–º–µ—Ä—Ç–Ω—ã–π –î–∂–æ", description: "–ñ–µ—Å—Ç–æ–∫–∏–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å –¶–∏—Ç–∞–¥–µ–ª–∏", rarity: "RARE" },
            { name: "–ù–∞–∫—Å", description: "–ü—Ä–µ–¥–∞–Ω–Ω—ã–π –≤–æ–∏–Ω-–∫–∞–º–∏–∫–∞–¥–∑–µ", rarity: "UNCOMMON" },
            { name: "–ì–æ–≤–æ—Ä—è—â–∏–π –ü—É–ª–µ–º–µ—Ç", description: "–ú–µ—Ç–∫–∏–π —Å—Ç—Ä–µ–ª–æ–∫ –∏–∑ –ø—É—Å—Ç–æ—à–µ–π", rarity: "UNCOMMON" },
            { name: "–ú–µ—Ö–∞–Ω–∏–∫ –ú–µ—Ä—Ç–≤—ã—Ö", description: "–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∫", rarity: "UNCOMMON" },
            { name: "–†–µ–π–¥–µ—Ä –ü—É—Å—Ç—ã–Ω–∏", description: "–ë–µ–∑–∂–∞–ª–æ—Å—Ç–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫", rarity: "COMMON" },
            { name: "–ú—É—Å–æ—Ä—â–∏–∫", description: "–ò—Å–∫–∞—Ç–µ–ª—å —Ü–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤", rarity: "COMMON" }
        ];

        // –°–æ–±—ã—Ç–∏—è
        const events = [
            { name: "–í–æ–π–Ω–∞ –∑–∞ –ë–µ–Ω–∑–∏–Ω", description: "–ó–∞—Ö–≤–∞—Ç–∏—Ç–µ —Ç–æ–ø–ª–∏–≤–Ω—ã–π —Å–∫–ª–∞–¥", rarity: "RARE" },
            { name: "–ü–µ—Å—á–∞–Ω–∞—è –ë—É—Ä—è", description: "–°—Ç–∏—Ö–∏–π–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ –ø—É—Å—Ç—ã–Ω–∏", rarity: "RARE" },
            { name: "–ó–∞—Å–∞–¥–∞ –≤ –ö–∞–Ω—å–æ–Ω–µ", description: "–í–Ω–µ–∑–∞–ø–Ω–∞—è –∞—Ç–∞–∫–∞ —Ä–µ–π–¥–µ—Ä–æ–≤", rarity: "UNCOMMON" },
            { name: "–ì–æ–Ω–∫–∞ –°–º–µ—Ä—Ç–∏", description: "–°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –≥–æ–Ω–∫–∞ –∑–∞ —Ä–µ—Å—É—Ä—Å—ã", rarity: "UNCOMMON" },
            { name: "–¢–æ—Ä–≥–æ–≤—ã–π –ö–∞—Ä–∞–≤–∞–Ω", description: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏", rarity: "COMMON" },
            { name: "–†—É–∏–Ω—ã –°—Ç–∞—Ä–æ–≥–æ –ú–∏—Ä–∞", description: "–ü–æ–∏—Å–∫ –¥—Ä–µ–≤–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", rarity: "COMMON" }
        ];

        // –õ–æ–∫–∞—Ü–∏–∏
        const locations = [
            { name: "–¶–∏—Ç–∞–¥–µ–ª—å", description: "–ö—Ä–µ–ø–æ—Å—Ç—å —Å –∑–∞–ø–∞—Å–∞–º–∏ –≤–æ–¥—ã", rarity: "RARE" },
            { name: "–ì–∞–∑—Ç–∞—É–Ω", description: "–ì–æ—Ä–æ–¥-–∑–∞–≤–æ–¥ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ç–æ–ø–ª–∏–≤–∞", rarity: "RARE" },
            { name: "–ü—É–ª—è-–§–µ—Ä–º–∞", description: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤", rarity: "UNCOMMON" },
            { name: "–£–±–µ–∂–∏—â–µ –ú–µ—Ö–∞–Ω–∏–∫–æ–≤", description: "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –≤—ã–∂–∏–≤—à–∏—Ö", rarity: "UNCOMMON" },
            { name: "–ó–∞—Å—Ç–∞–≤–∞ –†–∞–∑–±–æ–π–Ω–∏–∫–æ–≤", description: "–û–ø–æ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç —Ä–µ–π–¥–µ—Ä–æ–≤", rarity: "COMMON" },
            { name: "–í–æ–¥—è–Ω–∞—è –°—Ç–∞–Ω—Ü–∏—è", description: "–ò—Å—Ç–æ—á–Ω–∏–∫ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã", rarity: "COMMON" }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        characters.forEach(char => {
            const count = char.rarity === 'RARE' ? 3 : (char.rarity === 'UNCOMMON' ? 4 : 5);
            for (let i = 0; i < count; i++) {
                const victoryPoints = Math.random() < 0.7 ? (char.rarity === 'RARE' ? 3 : (char.rarity === 'UNCOMMON' ? 2 : 1)) : 0;
                cards.push(new Card(id++, char.name, 'MOVE', char.rarity, char.description, victoryPoints));
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å–æ–±—ã—Ç–∏–π
        events.forEach(event => {
            const count = event.rarity === 'RARE' ? 3 : (event.rarity === 'UNCOMMON' ? 4 : 5);
            for (let i = 0; i < count; i++) {
                const victoryPoints = Math.random() < 0.7 ? (event.rarity === 'RARE' ? 3 : (event.rarity === 'UNCOMMON' ? 2 : 1)) : 0;
                cards.push(new Card(id++, event.name, 'MOVE', event.rarity, event.description, victoryPoints));
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –ª–æ–∫–∞—Ü–∏–π
        locations.forEach(location => {
            const count = location.rarity === 'RARE' ? 3 : (location.rarity === 'UNCOMMON' ? 4 : 5);
            for (let i = 0; i < count; i++) {
                const victoryPoints = Math.random() < 0.7 ? (location.rarity === 'RARE' ? 3 : (location.rarity === 'UNCOMMON' ? 2 : 1)) : 0;
                cards.push(new Card(id++, location.name, 'MOVE', location.rarity, location.description, victoryPoints));
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        for (let i = 0; i < 5; i++) {
            const victoryPoints = Math.random() < 0.7 ? 3 : 0;
            cards.push(new Card(id++, `–≠–ø–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ${i + 1}`, 'MOVE', 'EPIC', '–≠–ø–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', victoryPoints));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
        for (let i = 0; i < 3; i++) {
            const victoryPoints = Math.random() < 0.7 ? 3 : 0;
            cards.push(new Card(id++, `–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ ${i + 1}`, 'MOVE', 'LEGENDARY', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', victoryPoints));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        for (let i = 0; i < 2; i++) {
            const victoryPoints = Math.random() < 0.7 ? 3 : 0;
            cards.push(new Card(id++, `–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ ${i + 1}`, 'MOVE', 'MYTHIC', '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', victoryPoints));
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        for (let i = cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [cards[i], cards[j]] = [cards[j], cards[i]];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
        cards.forEach(card => {
            card.emoji = Card.EMOJIS[Math.floor(Math.random() * Card.EMOJIS.length)];
            card.emojiPosition = Card.CORNERS[Math.floor(Math.random() * Card.CORNERS.length)];
        });

        return cards;
    }

    createCardElement() {
        const cardElement = document.createElement('div');
        cardElement.className = `card ${this.type}`;
        cardElement.dataset.type = this.type.toLowerCase();
        cardElement.dataset.rarity = this.rarity.toLowerCase();
        cardElement.dataset.cardId = this.id;
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç—ã
        const nameElement = document.createElement('div');
        nameElement.className = 'card-name';
        nameElement.textContent = this.name;
        
        const descriptionElement = document.createElement('div');
        descriptionElement.className = 'card-description';
        descriptionElement.textContent = this.description;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        cardElement.appendChild(nameElement);
        cardElement.appendChild(descriptionElement);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.emoji && this.emojiPosition) {
            const emojiElement = document.createElement('div');
            emojiElement.className = `card-emoji ${this.emojiPosition}`;
            emojiElement.textContent = this.emoji;
            cardElement.appendChild(emojiElement);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–Ω—ã–µ –æ—á–∫–∏ (—á–µ—Ä–µ–ø–∞) –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
        if (this.victoryPoints > 0) {
            const victoryPointsElement = document.createElement('div');
            victoryPointsElement.className = 'card-victory-points';
            victoryPointsElement.textContent = '‚ò†Ô∏è'.repeat(this.victoryPoints);
            cardElement.appendChild(victoryPointsElement);
        }

        this.element = cardElement;
        return cardElement;
    }

    canPlay(player) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ –±—ã—Ç—å —Å—ã–≥—Ä–∞–Ω–∞
        switch (this.type) {
            case 'MOVE':
                return player.getAvailableMoves().length > 0;
            case 'ATTACK':
                return player.getAdjacentCards().length > 0;
            case 'REST':
                return player.deck.length > 0;
            case 'HEAL':
                return player.health < player.maxHealth;
            default:
                return false;
        }
    }

    play(player, target) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞—Ä—Ç—ã
        switch (this.type) {
            case 'MOVE':
                return game.board.movePlayer(player.id, target);
            case 'ATTACK':
                return game.board.captureCard(player.id, target);
            case 'REST':
                const card = player.drawCard();
                return card !== null;
            case 'HEAL':
                if (player.health < player.maxHealth) {
                    player.health += 2;
                    if (player.health > player.maxHealth) {
                        player.health = player.maxHealth;
                    }
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
} 